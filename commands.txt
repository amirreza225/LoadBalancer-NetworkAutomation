# ================================================================
# SDN LOAD BALANCER - COMPLETE COMMAND REFERENCE
# ================================================================
# All 7 algorithms with both iperf and D-ITG testing
# Optimized for hexring topology (192.168.8.4x addressing)
# ================================================================
# ==================== RUNNING THE SYSTEM ====================

-start controller (Terminal 1)-
ryu-manager --observe-links --ofp-tcp-listen-port 6653 --wsapi-port 8080 --wsapi-host 0.0.0.0 lb_modular.py

-start hexring topology (Terminal 2)-
sudo python3 hexring_topo.py

-start web dashboard (Terminal 3)-
cd web/
sudo python3 -m http.server 8000

-access dashboard-
# Open browser: http://localhost:8000

# ==================== BASIC CONNECTIVITY ====================

-test connectivity-
pingall

-check host IPs-
net

# ==================== ADAPTIVE MODE TESTING ====================

-iperf adaptive test (enhanced congestion avoidance)-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 100M -t 60

-D-ITG adaptive test-
h2 ITGRecv -l /tmp/adaptive_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 25000 -c 1000 -t 60000 -s 0.1 -l /tmp/adaptive_send.log

-adaptive multi-flow stress test (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h4 iperf -s -p 5003 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 250M -t 120 &
h5 iperf -c 192.168.8.42 -u -p 5002 -b 250M -t 120 &
h6 iperf -c 192.168.8.43 -u -p 5003 -b 250M -t 120

-adaptive multi-flow stress test (D-ITG)-
h2 ITGRecv -l /tmp/adaptive_1_recv.log &
h3 ITGRecv -l /tmp/adaptive_2_recv.log &
h4 ITGRecv -l /tmp/adaptive_3_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 30000 -c 5000 -t 120000 -s 0.1 -l /tmp/adaptive_1_send.log &
h5 ITGSend -T UDP -a 192.168.8.42 -C 30000 -c 5000 -t 120000 -s 0.2 -l /tmp/adaptive_2_send.log &
h6 ITGSend -T UDP -a 192.168.8.43 -C 30000 -c 5000 -t 120000 -s 0.3 -l /tmp/adaptive_3_send.log

# ==================== LEAST LOADED MODE TESTING ====================

-iperf least loaded test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 80M -t 60

-D-ITG least loaded test-
h2 ITGRecv -l /tmp/least_loaded_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 22000 -c 1000 -t 60000 -s 0.1 -l /tmp/least_loaded_send.log

-least loaded comparison test (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 80M -t 120 &
h4 iperf -c 192.168.8.42 -u -p 5002 -b 100M -t 120

-least loaded comparison test (D-ITG)-
h2 ITGRecv -l /tmp/least_1_recv.log &
h3 ITGRecv -l /tmp/least_2_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 20000 -c 1000 -t 120000 -s 0.1 -l /tmp/least_1_send.log &
h4 ITGSend -T UDP -a 192.168.8.42 -C 25000 -c 1000 -t 120000 -s 0.2 -l /tmp/least_2_send.log

# ==================== WEIGHTED ECMP MODE TESTING ====================

-iperf weighted ECMP test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 120M -t 60

-D-ITG weighted ECMP test-
h2 ITGRecv -l /tmp/ecmp_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 28000 -c 1000 -t 60000 -s 0.4 -l /tmp/ecmp_send.log

-weighted ECMP multiple flows (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h4 iperf -s -p 5003 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 80M -t 120 &
h1 iperf -c 192.168.8.42 -u -p 5002 -b 80M -t 120 &
h1 iperf -c 192.168.8.43 -u -p 5003 -b 80M -t 120

-weighted ECMP multiple flows (D-ITG)-
h2 ITGRecv -l /tmp/ecmp_1_recv.log &
h3 ITGRecv -l /tmp/ecmp_2_recv.log &
h4 ITGRecv -l /tmp/ecmp_3_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 20000 -c 1000 -t 120000 -s 0.4 -l /tmp/ecmp_1_send.log &
h1 ITGSend -T UDP -a 192.168.8.42 -C 22000 -c 1000 -t 120000 -s 0.5 -l /tmp/ecmp_2_send.log &
h1 ITGSend -T UDP -a 192.168.8.43 -C 24000 -c 1000 -t 120000 -s 0.6 -l /tmp/ecmp_3_send.log

# ==================== ROUND ROBIN MODE TESTING ====================

-iperf round robin test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 90M -t 60

-D-ITG round robin test-
h2 ITGRecv -l /tmp/rr_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 23000 -c 1000 -t 60000 -s 0.4 -l /tmp/rr_send.log

-round robin sequential flows (iperf)-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 80M -t 30
h1 iperf -c 192.168.8.41 -u -b 80M -t 30
h1 iperf -c 192.168.8.41 -u -b 80M -t 30

-round robin sequential flows (D-ITG)-
h2 ITGRecv -l /tmp/rr_1_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 20000 -c 1000 -t 30000 -s 0.4 -l /tmp/rr_1_send.log
h2 ITGRecv -l /tmp/rr_2_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 21000 -c 1000 -t 30000 -s 0.5 -l /tmp/rr_2_send.log
h2 ITGRecv -l /tmp/rr_3_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 22000 -c 1000 -t 30000 -s 0.6 -l /tmp/rr_3_send.log

# ==================== LATENCY AWARE MODE TESTING ====================

-iperf latency aware test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 70M -t 60

-D-ITG latency aware test-
h2 ITGRecv -l /tmp/latency_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 27000 -c 1000 -t 60000 -s 0.4 -l /tmp/latency_send.log

-latency sensitive applications (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 50M -t 120 &
h4 iperf -c 192.168.8.42 -u -p 5002 -b 50M -t 120

-latency sensitive applications (D-ITG)-
h2 ITGRecv -l /tmp/latency_1_recv.log &
h3 ITGRecv -l /tmp/latency_2_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 25000 -c 1000 -t 120000 -s 0.4 -l /tmp/latency_1_send.log &
h4 ITGSend -T UDP -a 192.168.8.42 -C 26000 -c 1000 -t 120000 -s 0.5 -l /tmp/latency_2_send.log

# ==================== QOS AWARE MODE TESTING ====================

-iperf QoS aware test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 85M -t 60

-D-ITG QoS aware test-
h2 ITGRecv -l /tmp/qos_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 26000 -c 1000 -t 60000 -s 0.4 -l /tmp/qos_send.log

-QoS critical priority flows (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h4 iperf -s -p 5003 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 50M -t 120 &
h5 iperf -c 192.168.8.42 -u -p 5002 -b 70M -t 120 &
h6 iperf -c 192.168.8.43 -u -p 5003 -b 90M -t 120

-QoS critical priority flows (D-ITG)-
h2 ITGRecv -l /tmp/qos_critical_recv.log &
h3 ITGRecv -l /tmp/qos_high_recv.log &
h4 ITGRecv -l /tmp/qos_normal_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 28000 -c 1000 -t 120000 -s 0.4 -l /tmp/qos_critical_send.log &
h5 ITGSend -T UDP -a 192.168.8.42 -C 24000 -c 1000 -t 120000 -s 0.5 -l /tmp/qos_high_send.log &
h6 ITGSend -T UDP -a 192.168.8.43 -C 22000 -c 1000 -t 120000 -s 0.6 -l /tmp/qos_normal_send.log

# ==================== FLOW AWARE MODE TESTING ====================

-iperf flow aware test-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 95M -t 60

-D-ITG flow aware test-
h2 ITGRecv -l /tmp/flow_aware_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 27000 -c 1000 -t 60000 -s 0.4 -l /tmp/flow_aware_send.log

-elephant flow test (iperf)-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 200M -t 120

-elephant flow test (D-ITG)-
h2 ITGRecv -l /tmp/elephant_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 35000 -c 1000 -t 120000 -s 0.4 -l /tmp/elephant_send.log

-mice flow test (iperf)-
h2 iperf -s &
h1 iperf -c 192.168.8.41 -u -b 30M -t 120

-mice flow test (D-ITG)-
h2 ITGRecv -l /tmp/mice_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 20000 -c 1000 -t 120000 -s 0.4 -l /tmp/mice_send.log

-mixed elephant/mice flows (iperf)-
h2 iperf -s -p 5001 &
h3 iperf -s -p 5002 &
h1 iperf -c 192.168.8.41 -u -p 5001 -b 150M -t 120 &
h4 iperf -c 192.168.8.42 -u -p 5002 -b 50M -t 120

-mixed elephant/mice flows (D-ITG)-
h2 ITGRecv -l /tmp/mixed_elephant_recv.log &
h3 ITGRecv -l /tmp/mixed_mice_recv.log &
h1 ITGSend -T UDP -a 192.168.8.41 -C 30000 -c 1000 -t 120000 -s 0.4 -l /tmp/mixed_elephant_send.log &
h4 ITGSend -T UDP -a 192.168.8.42 -C 20000 -c 1000 -t 120000 -s 0.5 -l /tmp/mixed_mice_send.log

# ==================== ALGORITHM COMPARISON ====================

-efficiency metrics-
curl -s http://localhost:8080/stats/efficiency | python3 -m json.tool

-algorithm performance-
curl -s http://localhost:8080/stats/algorithm | python3 -m json.tool

-link utilization-
curl -s http://localhost:8080/load/links | python3 -m json.tool

-active flow paths-
curl -s http://localhost:8080/load/path | python3 -m json.tool

# ==================== PERFORMANCE MONITORING ====================

-real-time monitoring-
watch -n 2 'curl -s http://localhost:8080/stats/efficiency | python3 -m json.tool'

-link utilization monitoring-
watch -n 1 'curl -s http://localhost:8080/load/links | python3 -m json.tool'

-D-ITG log analysis-
ITGDec /tmp/adaptive_send.log | grep "Bitrate"
ITGDec /tmp/elephant_send.log | grep "Packets"
ITGDec /tmp/mice_recv.log | grep "Jitter"

# ==================== CLEANUP ====================

-stop D-ITG processes-
sudo pkill -f ITGSend
sudo pkill -f ITGRecv

-clean mininet-
sudo mn -c

-remove D-ITG logs-
rm -f /tmp/*.log

-kill all processes-
sudo pkill -f mininet
sudo pkill -f ryu-manager
sudo pkill -f "python3 -m http.server"

# ==================== NOTES ====================

# D-ITG Rate Calculation:
# Bandwidth (Mbps) = -C × packet_size (bytes) × 8 / 1,000,000
# Example: -C 25000 × 1000 bytes × 8 / 1,000,000 = 200 Mbps theoretical
# Actual rates ~25-40 Mbps due to network constraints and packet timing
# Updated D-ITG rates (20000-35000) target 25+ Mbps actual throughput to trigger congestion detection

# Hexring Host IPs:
# h1: 192.168.8.40
# h2: 192.168.8.41  
# h3: 192.168.8.42
# h4: 192.168.8.43
# h5: 192.168.8.44
# h6: 192.168.8.45

# Algorithm Recommendations:
# - Adaptive: Best overall performance with congestion prediction
# - Least Loaded: Good for load balancing without prediction
# - Weighted ECMP: Good for consistent flow distribution
# - Round Robin: Simple distribution, good for testing
# - Latency Aware: Best for real-time applications
# - QoS Aware: Best for mixed priority traffic
# - Flow Aware: Best for mixed elephant/mice traffic patterns